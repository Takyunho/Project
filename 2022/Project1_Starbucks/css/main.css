/*~ COMMON */
body {
  color: #333;  /*@ 그냥 검정보단 어두운 회색으로 하는 것이 더 멋짐 */
  font-size: 16px;  /* 16px이 아닌 특정브라우저가 있을 수 있기 때문 */
  font-weight: 400; /* 일반적인 글씨두께 */
  line-height: 1.4; /* 16px의 1.4배 줄높이를 가진다. */
  font-family: 'Nanum Gothic', sans-serif;
  height: 2000px;
}
img {
  display: block; /* @ 기본적으로 img는 인라인 요소이다. 그래서 아래의 여백이 생기는 것. 따라서 display: block으로 아래의 여백을 제거 */
}
a {
  text-decoration: none;
}
.inner {    /*@ 공통으로 사용할거기 때문에 따로 뺀다. (레이아웃 가운데 정렬) */
  width: 1100px;
  margin: 0 auto;
  position: relative;
}
/* 전역버튼 스타일링 */
.btn {
  width: 130px;
  padding: 10px;
  border: 2px solid #333;
  border-radius: 4px;
  color: #333;
  font-size: 16px;    /* 부모요소의 font-size로부터 독립된 사이즈를 갖기 위해 따로 지정 */
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  box-sizing: border-box; 
  display: block; /*@ a태그나 span태그에 버튼을 붙였을 때에도 정상작동되도록 하기 위해 display속성을 block으로 지정 */
  transition: .4s;
}
.btn:hover {
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse {     /* .btn.btn--reverse => 일치 선택자 */
  background-color: #333;
  color: #fff;
}
.btn.btn--reverse:hover {
  background-color: transparent;
  color: #333;
}
.btn.btn--brown {
  color: #592B18;
  border-color: #592B18;
}
.btn.btn--brown:hover {
  color: #fff;
  background-color: #592B18;
}
.btn.btn--gold {
  color: #D9AA8A;
  border-color: #D9AA8A;
}
.btn.btn--gold:hover {
  color: #fff;
  background-color: #D9AA8A;
}
.btn.btn--white {
  color: #fff;
  border-color: #fff;
}
.btn.btn--white:hover {
  color: #333;
  background-color: #fff;
}



/*~ HEADER */
header { 
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;
  /* @ position: relative;   badge의 부모요소이므로, 포지션 지정 */
  /* @ 그러나 아래에서 fixed를 해줬으므로, 주석처리 */
  position: fixed;
  top: 0;
  /* @ position fixed 와 position absolute는 가로 너비를 최소한으로 사용하려고 한다. 일반적으로 블록요소는 가로너비가 최대한으로 늘어나려고 하지만, 위에 두개는 아님!! */
  width: 100%;
  z-index: 9;
}
header > .inner {   /* header의 자식요소인 inner만 높이값 지정 */
  height: 120px;
}
.logo {
  /*@ 가운데 '배치' @*/
  /*@ top: 0 , botom: 0으로 수직의 끝점을 잡아주고, 그 끝점에서 margin: auto를 사용하면 가운데로 정렬된다. 이때, height: 높이값 으로 item의 높이를 지정해줘야 그 item이 가운데로 잘 정렬된다. */
  /*@ 같은 원리로 left, right를 0으로 잡고 width값을 설정하고나서 margin: auto를 사용하면 수평가운데 정렬도 가능하다. */
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
  height: 75px; /* logo의 높이값과 같도록 해야한다. */
  left: 0;  /* logo가 inner에 잘 붙어있다고 명시 */
} 
/** 서브메뉴 **/
header .sub-menu {
  display: flex;
  position: absolute;
  top: 10px;
  right: 0;
}
header .sub-menu ul.menu {
  display: flex;
  font-family: Arial, Helvetica, sans-serif;
}
header .sub-menu ul.menu li {
  /* before의 부모 태그는 li */
  position: relative;
}
header .sub-menu ul.menu li::before {
  content: "";
  /*@ before 가상요소는 인라인 요소이므로 block으로 해줘야 가로세로값을 가질 수 있음 */
  /* display: block; */
  /*@ position: absolute와 fixed는 요소의 display값이 block으로 바뀌므로, display값을 따로 명시하지 않아도 된다. */
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position: absolute; 
  top: 0;
  bottom: 0;
  margin: auto;
}
header .sub-menu ul.menu li:first-child::before {
  /* 첫번째 li태그의 가상요소(즉, sing in앞의 구분선)를 안보이도록 */
  display: none; 
}
header .sub-menu ul.menu li a {
  font-size: 12px;
  padding: 11px 16px;
  display: block;
  color: #656565;
}
header .sub-menu ul.menu li a:hover {
  color: #000;
}
header .sub-menu .search {
  height: 34px;
  position: relative;
}
header .sub-menu .search input {
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  border-radius: 5px;
  outline: none;
  background-color: #fff;
  color: #777;
  font-size: 12px;
  transition: width .4s;
}
header .sub-menu .search input:focus {
  width: 190px;
  border: #669900;
}
header .sub-menu .search .material-icons {
  position: absolute;
  height: 24px;
  top: 0;
  bottom: 0;
  right: 5px;
  margin: auto;
  transition: .4s;  /* opacity에 효과주기 */
}   
header .sub-menu .search.focused .material-icons {  /* .search.focused = 일치선택자로 작성 */
  opacity: 0; /* focused 클래스가 붙었을 때 아이콘 안보이도록 하기 */
}
/** 메인 메뉴 **/
header .main-menu {
  display: flex;
  position: absolute;
  bottom: 0;
  right: 0;
  z-index: 1;
}
/* header .main-menu .item {
  
} */
header .main-menu .item .item__name {
  padding: 10px 20px 34px 20px;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 13px;
}
header .main-menu .item:hover .item__name { /* item__name에 hover를 붙이는 것이 아니라 .item(li태그)에 붙여야함 */
  background: #2c2a29;
  color: #669900;
  border-radius: 6px 6px 0 0;
  }
header .main-menu .item .item__contents {
  width: 100%;
  position: fixed;  /* 뷰포트로 배치 */
  left: 0;  /*@ fixed 사용시 top이나 bottom 속성을 사용하지 않아 수직 위치 값이 없다면, 요소의 원래 위치 그대로 사용한다. 따라서 left를 0으로만 줘도 됨 */
  /*@ 만약 absolute를 사용했다면 부모 요소를 기준으로 하므로 화면의 뷰포트 좌우 끝까지 늘어날 수 없게 된다. */
  display: none;
}
header .main-menu .item:hover .item__contents {
  display: block;
}

header .main-menu .item .item__contents .contents__menu {
  background-color: #2c2a29;
  /* height: 200px; */
  /* 안에 컨텐츠를 넣었으므로, 높이값은 필요x -> 기재하지 않으면 자동으로 auto가 됨 */
}
.contents__menu > ul {
  display: flex;
  padding: 20px 0;
}
.contents__menu > ul > li {
  width: 220px;
}
.contents__menu > ul > li h4 {
  padding: 3px 0 12px 0;
  font-size: 14px;
  color: #fff;
}
.contents__menu > ul > li ul li {
  padding: 5px 0;
  font-size: 12px;
  color: #999;
  cursor: pointer;
}
.contents__menu > ul > li ul li:hover {
  color: #669900;
}
header .main-menu .item .item__contents .contents__texture {
  padding: 26px 0;
  font-size: 12px;
  background-image: url("../images/main_menu_pattern.jpg");
  /* background-repeat 은 repeat이 기본값이여서 별다른 값을 입력하지 않아도 이미지가 반복된다. */
}
.contents__texture h4 {
  color: #999;
  font-weight: 700;
}
.contents__texture p {
  color: #669900;
  margin: 4px 0 14px;
}
/** 뱃지 */
.badges {
  position: absolute;
  top: 132px;
  right: 12px;
}
.badge {
  border-radius: 10px;
  overflow: hidden; /* @ div태그에는 border-radius가 들어가지만, 이미지에는 border-radius가 적용되지 않기 때문에, overflow - hidden을 통해 넘치는 부분을 안보이게 해줘야 한다. */
  margin-bottom: 12px;
  box-shadow: 4px 4px 10px rgba(0,0,0,.15);
  cursor: pointer;
}

/*~ VISUAL */
.visual {
  margin-top: 120px;
  background-image: url("../images/visual_bg.jpg");
  background-position: center;
}
.visual .inner {
  height: 646px;
}
/* .visual .inner .title { } */
/* 선택자를 작성하는 과정에서 생략할 수 있다. inner는 화면 중앙에 몰아주는 역할만 하기 때문에 사용할 필요가 없음 */
.visual .title {
  position: absolute;
  top: 88px;
  left: -10px;
}
/* 배치되는 요소가 다른 요소와 묶여있는 묶음이면 그 묶음을 기준으로 안에서 배치될 수 있는 구조로 만들면 좋다.  */
.visual .title .btn {
  position: absolute;
  top: 259px;
  left: 173px;
}
/* .cup1.image => 일치 선택자(cup1이라는 클래스를 가지면서 image도 갖는 선택자) */
.visual .cup1.image {
  position: absolute;
  bottom: 0px;
  right: -47px;
}
.visual .cup1.text {
  position: absolute;
  top: 38px;
  right: 171px;
}
.visual .cup2.image {
  position: absolute;
  bottom: 0;
  right: 162px;
}
.visual .cup2.text {
  position: absolute;
  top: 321px;
  right: 416px;
}
.visual .spoon {
  position: absolute;
  bottom: 0;
  left: 275px;
}
.visual .fade-in {
  opacity: 0;
}
